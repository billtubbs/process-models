function dy = cartpole_DAEs(t,Y,YP,params)
% dy = cartpole_DAEs(t,Y,YP,params)
% Differential algebraic equations (DAEs) for the 
% dynamic model of the cart-pole system based on
% the equations by Florian (2007).
%
% This function can be used with the MATLAB ode15i
% solver to simulate the system.
%
% Arguments:
%   t : double
%       Time.
%   Y : (5, 1) double vector
%       System outpus, y(t), defined:
%           y(1) : horizontal position of cart, x(t), from left to right
%           y(2) : angle of pole, theta(t), clockwise from vertical
%           y(3) : downward force of cart on track, Nc(t)
%           y(4) : velocity of cart, Dxt(t), from left to right
%           y(5) : angular velocity of pole, Dthetat(t), clockwise.
%   YP : (5, 1) double vector
%       Partial derivatives of y(t).
%   params : struct
%       Parameter values defined:
%           params.F : Force acting on cart (+ve to right)
%           params.g : Acceleration due to gravity (+ve down)
%           params.l : Pendulum length
%           params.mc : Cart mass
%           params.mp : Pole mass
%           params.muc : Coefficient of friction for cart and track 
%           params.mup : Coefficient of friction for pole joint.
% 
% The equations below were generated by the MATLAB
% Symbolic Math Toolbox version 9.0, 22-Jan-2023. See
% livescript 'solve_DAE_cartpole.mlx'.
%
% References:
%  - R. V. Florian (2007), Correct equations for the dynamics 
%    of the cart-pole system.
% 

    % Output variables
    %x = Y(1,:);  % x(t) is not used
    theta = Y(2,:);
    Nc = Y(3,:);
    Dxt = Y(4,:);
    Dthetat = Y(5,:);

    % Partial derivatives
    YP1 = YP(1,:);
    YP2 = YP(2,:);
    % YP3 = YP(3,:)  % not used
    YP4 = YP(4,:);
    YP5 = YP(5,:);

    % Parameters
    F = params.F;
    g = params.g;
    l = params.l;
    mc = params.mc;
    mp = params.mp;
    muc = params.muc;
    mup = params.mup;

    % Temporary variables
    cos_theta = cos(theta);
    sin_theta = sin(theta);
    t4 = mc + mp;
    t5 = Dthetat.^2;
    t6 = Dxt .* Nc;
    t8 = 1.0 ./ l;
    t7 = sign(t6);
    t9 = 1.0 ./ t4;

    % Compute DAEs
    dy = nan(5, 1);

    dy(1) = Nc .* 1.0e+3 ...
        - g .* t4 + l .* mp .* (YP5 .* sin_theta + cos_theta .* t5);

    dy(2) = YP5 ...
        - ( ...
            t8 .* ( ...
                -g .* sin_theta + cos_theta .* ( ...
                    t9 .* ( ...
                        F ...
                        + l .* mp .* t5 .* ( ...
                            sin_theta ...
                            + muc .* cos_theta .* t7 ...
                        ) ...
                    ) ...
                    - g .* muc .* t7 ...
                ) ...
            + (Dthetat .* mup .* t8) ./ mp) ...
        ) ./ ( ...
            mp .* cos_theta .* t9 .* (cos_theta - muc .* t7) ...
            - 4.0 ./ 3.0 ...
        );

    dy(3) = YP4 ...
        + t9 .* ( ...
            -F + l .* mp .* (YP5 .* cos_theta - sin_theta .* t5) ...
            + Nc .* muc .* t7 .* 1.0e+3 ...
        );

    dy(4) = Dxt - YP1;

    dy(5) = Dthetat - YP2;

end